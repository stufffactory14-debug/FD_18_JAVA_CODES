package class_notes_question;
import java.util.*;
public class assignment1 {
    public static void main(String[] args) {
        //QUES 1
        System.out.println(sumofn(5));

        //QUES 2
        table(7);

        //QUES 3
        System.out.println(factorial(5));

        //QUES 4
        System.out.println(count(98765));

        //QUES 5
        System.out.println(sum(432));

        //QUES 6
        System.out.println(palendrome(121));

        //QUES 7
        int n=8;
        for (int i=0;i<n;i++){
            System.out.print(fibonachi(i)+ " ");
        }

        //QUES 8
        System.out.println(prime(20));

        //QUES 9
        System.out.println(armstrong(153));

        //QUES 10
        System.out.println(strongnum(145));

        //QUES 11
        pytha(20);

    }

    static int sumofn(int n) {
        if (n == 0) {
            return 0;
        }
        return n + sumofn(n - 1);
    }

    static void table(int n) {
        for (int i = 1; i <= 10; i++) {
            System.out.println(n + "X" + i + "=" + n * i);
        }
    }

    static int factorial(int n) {
        if (n == 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }

    static int count(int n) {
        int count = 0;
        while (n > 0) {
            n /= 10;
            count++;
        }
        return count;
    }

    static int sum(int n) {
        int sum = 0;
        while (n > 0) {
            int rem = n % 10;
            sum += rem;
            n /= 10;
        }
        return sum;
    }

    static boolean palendrome(int n) {
        int orignal = n;
        int check = 0;
        while (n > 0) {
            int rem = n % 10;
            check += rem * 10;
            n /= 10;
        }
        if (orignal == check) {
            return true;
        } else {
            return false;
        }
    }

    static int fibonachi(int n){
        if(n==0){
            return 0;
        }
        if(n==1){
            return 1;
        }
        return fibonachi(n-1)+fibonachi(n-2);
    }

    static boolean prime(int n){
        if(n<=1){
            return false;
        }else{
            for (int i = 2; i < n; i++) {
                if(n%i==0){
                    return false;
                }
            }
        }
        return true;
    }

    static boolean armstrong(int n){
        int orignal =n;
        int sum=0;
        int temp=n;
        int length=0;
        while(n>0){
            length++;
            n/=10;
        }
        while(temp>0){
            int rem = temp%10;
            sum+=Math.pow(rem,length);
            temp/=10;
        }
        if(orignal==sum){
            return true;
        }
        return false;
    }

    static boolean strongnum(int n){
        int orignal =n;
        int check =0;
        while(n>0){
            int rem = n%10;
            check+=factorial(rem);
            n/=10;
        }
        return orignal==check;
    }

    static void pytha(int n){
        for(int a=1;a<=n;a++){
            for (int b = a+1; b <=n; b++) {
                for (int c = b+1; c <=n; c++) {
                    if(a*a + b*b == c*c){
                        System.out.println(a+" "+b+" "+c);

                    }
                }
            }
        }

    }

}


